project(viewer)

if(WIN32)
    generic_libs_find(glew ON      )
    generic_libs_find(glfw ON      )
    generic_libs_find(glm  ON      )
else()
    generic_libs_find(glew OFF     )
    generic_libs_find(glfw OFF     )
    generic_libs_find(glm  OFF     )
endif()
generic_libs_find(imgui ON         )
generic_libs_find(implot ON        )
generic_libs_find(imGuIZMO.quat ON )

include_directories( ${IMGUI_INCLUDE_DIRS}          )
include_directories( ${IMGUI_INCLUDE_DIRS}/backends )
include_directories( ${GLEW_INCLUDE_DIRS}           )
include_directories( ${GLEW_INCLUDE_DIRS}/include   )
include_directories( ${GLFW_INCLUDE_DIRS}           )
include_directories( ${GLFW_INCLUDE_DIRS}/include   )
include_directories( ${GLM_INCLUDE_DIRS}            )
include_directories( ${IMGUIZMOQUAT_INCLUDE_DIRS}/imGuIZMO.quat )
include_directories( ${IMGUI_INCLUDE_DIRS}/..       )
include_directories( ${CMAKE_SOURCE_DIR}/engine     )
include_directories( ${CMAKE_SOURCE_DIR}/utils      )

add_definitions( -DVGIZMO_USES_GLM -DLOGGING )
add_definitions( -DGLEW_STATIC               )

set( SRCS main.cpp gl_app.cpp gl_window.cpp imguizmo_dialog.cpp imguiparams_dialog.cpp geomshapes2.cpp ../../utils/log/log.cpp )

link_directories(${LIBS_DIR})

link_directories(${GLFW_LIBRARY_PATH}   )
link_directories(${GLEW_LIBRARY_PATH}   )
link_directories(${GLEW_LIBRARY_PATH2}  )
add_executable( ${PROJECT_NAME} ${SRCS} $<TARGET_OBJECTS:objengine>)

if(UNITYBUILD)
    set_property( TARGET ${PROJECT_NAME} PROPERTY UNITY_BUILD ON )
endif()

if (MSVC)
    target_link_libraries( ${PROJECT_NAME} imgui imguizmoquat ${OPENGL_gl_LIBRARY} glfw3 glew)
elseif(APPLE)
    target_link_libraries( ${PROJECT_NAME} libimgui.a imguizmoquat ${OPENGL_gl_LIBRARY} libglfw.dylib glew "-framework Foundation -framework IOKit -framework Cocoa" )
else()
    target_link_libraries( ${PROJECT_NAME} libimgui.a imguizmoquat implot ${OPENGL_gl_LIBRARY} libglfw.so libGLEW.so -ldl -lpthread -lGL -lGLU)
endif()
